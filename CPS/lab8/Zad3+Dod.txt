%% Zadanie 3 - Opcjonalne implementacje (rozszerzenie)
% Ten plik zawiera dodatkowe metody repróbkowania i miksowania dźwięku
% wymagane w opcjonalnej części zadania 3
clear all;
close all;
clc;

%% 1. Definicja parametrów sygnałów
% Parametry sygnałów
fs_target = 48000; % Hz - docelowa częstotliwość próbkowania
t = 1; % s - czas trwania sygnału

% Sygnały składowe
f1 = 1001.2; % Hz
fs1 = 8000;  % Hz
f2 = 303.1;  % Hz
fs2 = 32000; % Hz
f3 = 2110.4; % Hz
fs3 = 48000; % Hz

%% 2. Generacja sygnałów sinusoidalnych
% Generacja wektorów czasu i sygnałów
t1 = (0:1/fs1:t-1/fs1)';
t2 = (0:1/fs2:t-1/fs2)';
t3 = (0:1/fs3:t-1/fs3)';
t_target = (0:1/fs_target:t-1/fs_target)';

x1 = sin(2*pi*f1*t1);
x2 = sin(2*pi*f2*t2);
x3 = sin(2*pi*f3*t3);

% Generacja teoretycznego sygnału wzorcowego
x4_expected = sin(2*pi*f1*t_target) + sin(2*pi*f2*t_target) + sin(2*pi*f3*t_target);

%% 3. Opcjonalne metody repróbkowania
disp('Metoda 3: Interpolacja liniowa');

x1_linear = interp1(t1, x1, t_target, 'linear');
x2_linear = interp1(t2, x2, t_target, 'linear');
x3_linear = x3; % już ma odpowiednią częstotliwość

%% 4. Rekonstrukcja metodą sinc - opcjonalna implementacja
disp('Metoda 4: Rekonstrukcja sinc (uproszczona implementacja)');

% Funkcja sinc(x) = sin(π*x)/(π*x) dla x≠0, sinc(0)=1
sinc_func = @(x) sin(pi*x)./(pi*x + eps);

% Rekonstrukcja sinc dla x1 (uproszczona wersja)
% Ograniczmy liczbę próbek do uwzględnienia w rekonstrukcji
max_samples = 20;
x1_sinc = zeros(size(t_target));

for i = 1:length(t_target)
    % Znajdź indeksy próbek w oryginalnym sygnale, które są najbliżej
    % bieżącego punktu w czasie
    t_diff_idx = round(t_target(i) * fs1) + 1;
    start_idx = max(1, t_diff_idx - max_samples);
    end_idx = min(length(t1), t_diff_idx + max_samples);
    
    % Sumowanie wkładów od pobliskich próbek
    for j = start_idx:end_idx
        if j <= length(t1)
            t_diff = t_target(i) - t1(j);
            x1_sinc(i) = x1_sinc(i) + x1(j) * sinc_func(fs1 * t_diff);
        end
    end
end

% Podobna rekonstrukcja dla x2
x2_sinc = zeros(size(t_target));
for i = 1:length(t_target)
    t_diff_idx = round(t_target(i) * fs2) + 1;
    start_idx = max(1, t_diff_idx - max_samples);
    end_idx = min(length(t2), t_diff_idx + max_samples);
    
    for j = start_idx:end_idx
        if j <= length(t2)
            t_diff = t_target(i) - t2(j);
            x2_sinc(i) = x2_sinc(i) + x2(j) * sinc_func(fs2 * t_diff);
        end
    end
end

% x3 już ma odpowiednią częstotliwość
x3_sinc = x3;

%% 5. Miksowanie sygnałów - dopasowanie długości i dodawanie dla opcjonalnych metod

% Określenie najkrótszej długości sygnału
min_length3 = min([length(x1_linear), length(x2_linear), length(x3_linear)]);
min_length4 = min([length(x1_sinc), length(x2_sinc), length(x3_sinc)]);

% Przytnij sygnały do jednakowej długości dla interpolacji liniowej
x1_linear = x1_linear(1:min_length3);
x2_linear = x2_linear(1:min_length3);
x3_linear = x3_linear(1:min_length3);
x4_linear = x1_linear + x2_linear + x3_linear;

% Przytnij sygnały do jednakowej długości dla rekonstrukcji sinc
x1_sinc = x1_sinc(1:min_length4);
x2_sinc = x2_sinc(1:min_length4);
x3_sinc = x3_sinc(1:min_length4);
x4_sinc = x1_sinc + x2_sinc + x3_sinc;

% Przytnij sygnał oczekiwany do porównania
x4_expected_3 = x4_expected(1:min_length3);
x4_expected_4 = x4_expected(1:min_length4);

%% 6. Obliczenie błędów MSE dla dodatkowych metod
mse_linear = mean((x4_linear - x4_expected_3).^2);
mse_sinc = mean((x4_sinc - x4_expected_4).^2);

% Wyświetlenie wyników
fprintf('Porównanie dodatkowych metod repróbkowania (MSE):\n');
fprintf('3. Interpolacja liniowa: %.10e\n', mse_linear);
fprintf('4. Rekonstrukcja sinc: %.10e\n', mse_sinc);

%% 7. Odsłuch sygnałów z dodatkowych metod
disp('Odsłuch sygnału wynikowego (interpolacja liniowa):');
sound(x4_linear/max(abs(x4_linear)), fs_target);
pause(1.5);

disp('Odsłuch sygnału wynikowego (rekonstrukcja sinc):');
sound(x4_sinc/max(abs(x4_sinc)), fs_target);

%% 8. Wczytywanie i miksowanie plików WAV dla CD-Audio (opcjonalne)
% Standard płyty CD-Audio to 44.1 kHz
fs_cd = 44100;

try
    % Wczytaj pliki WAV
    [wav1, fs_wav1] = audioread('x1.wav');
    [wav2, fs_wav2] = audioread('x2.wav');
    
    % Konwersja do mono jeśli stereo
    if size(wav1, 2) > 1
        wav1 = mean(wav1, 2);
    end
    if size(wav2, 2) > 1
        wav2 = mean(wav2, 2);
    end
    
    % Repróbkowanie do 44.1 kHz (standard CD)
    [p_wav1_cd, q_wav1_cd] = rat(fs_cd/fs_wav1);
    [p_wav2_cd, q_wav2_cd] = rat(fs_cd/fs_wav2);
    
    wav1_cd = resample(wav1, p_wav1_cd, q_wav1_cd);
    wav2_cd = resample(wav2, p_wav2_cd, q_wav2_cd);
    
    % Dostosowanie długości
    min_length_cd = min(length(wav1_cd), length(wav2_cd));
    wav1_cd = wav1_cd(1:min_length_cd);
    wav2_cd = wav2_cd(1:min_length_cd);
    
    % Miksowanie
    wav_mixed_cd = wav1_cd + wav2_cd;
    
    % Normalizacja
    wav_mixed_cd = wav_mixed_cd / max(abs(wav_mixed_cd));
    
    % Zapis do pliku
    audiowrite('mixed_cd.wav', wav_mixed_cd, fs_cd);
    
    % Odsłuch
    disp('Odsłuch zmiksowanych plików WAV (44.1kHz - CD-Audio):');
    sound(wav_mixed_cd, fs_cd);
    
catch
    warning('Nie udało się wykonać miksowania dla formatu CD-Audio.');
end
